{"version":3,"sources":["components/Score.js","components/Card.js","components/Jumbotron.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","className","href","guess","value","top","Card","src","img","onClick","handleScoring","id","alt","Jumbotron","style","backgroundImage","color","Home","state","characters","score","topScore","guessed","characterId","incrementScore","newScore","setState","push","resetGame","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","includes","this","map","char","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"k1DAEe,SAASA,EAAMC,GAO1B,OACI,6BACI,yBAAKC,UAAU,UACX,uBAAGC,KAAK,KAAR,eACA,uBAAGA,KAAK,KAAKF,EAAMG,OACnB,uBAAGD,KAAK,KAAR,UAAmB,8BAAOF,EAAMI,OAAhC,iBAA2D,8BAAOJ,EAAMK,QCZzE,SAASC,EAAKN,GAEzB,OAGU,yBAAKC,UAAU,YACf,yBAAKA,UAAU,QACb,yBAAKM,IAAKP,EAAMQ,IAAKC,QAAS,kBAAMT,EAAMU,cAAcV,EAAMW,KAAKV,UAAU,eAAeW,IAAI,UCPjG,SAASC,IAOpB,OACI,6BACI,yBAAKC,MAPI,CACbC,gBAAiB,gFACjBC,MAAO,SAKmBf,UAAU,gDACpC,wBAAIA,UAAU,aAAd,gBACA,uBAAGA,UAAU,QAAO,kDACpB,wBAAIA,UAAU,SACd,2G,ICTagB,E,4MAEjBC,MAAQ,CACJC,aACAC,MAAO,EACPC,SAAU,EACVC,QAAS,GAETC,YAAa,I,EAGjBC,eAAiB,SAACb,GACd,IAAIc,EAAW,EAAKP,MAAME,MAAQ,EAElC,EAAKM,SAAS,CACVN,MAAOK,EACPH,QAAS,2BAGb,EAAKJ,MAAMK,YAAYI,KAAKhB,GAGxBc,GADY,EAAKP,MAAMG,UAEvB,EAAKK,SAAS,CAAEL,SAAUI,K,EAIlCG,UAAY,WACR,EAAKF,SAAS,CAAEH,YAAa,KAC7B,EAAKG,SAAS,CAAEJ,QAAS,6BACzB,EAAKI,SAAS,CAAEN,MAAO,K,EAO3BV,cAAgB,SAAAC,GAIZ,IAHA,IAAsCkB,EAAgBC,EAAlDC,EAAeZ,EAAWa,OAGvB,IAAMD,GAGTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBV,EAHjBY,GAAgB,GAIhBZ,EAAWY,GAAgBZ,EAAWW,GACtCX,EAAWW,GAAeD,EAG9B,EAAKH,SAAS,CAAEP,eAEhB,EAAKD,MAAMK,YAAYa,SAASzB,GAAM,EAAKiB,YAAc,EAAKJ,eAAeb,I,uDAGvE,IAAD,OACL,OACI,6BACI,kBAACZ,EAAD,CAAOK,MAAOiC,KAAKnB,MAAME,MACrBf,IAAKgC,KAAKnB,MAAMG,SAChBlB,MAAOkC,KAAKnB,MAAMI,UACtB,kBAACT,EAAD,MAEA,yBAAKZ,UAAU,6CACVoC,KAAKnB,MAAMC,WAAWmB,KAAI,SAAAC,GACvB,OAAO,kBAACjC,EAAD,CACHE,IAAK+B,EAAKhC,IACViC,IAAKD,EAAK5B,GACVA,GAAI4B,EAAK5B,GACTD,cAAe,EAAKA,yB,GAxEd+B,aCOnBC,MATf,WAEE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,QCIc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06bc0e99.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Score(props) {\n\n    // var score = 0;\n    // var topScore = 0;\n    // var guessedCorrect = \"You Guessed Correctly!\";\n    // var guessedIncorrect =\"You Guessed Incorrectly!\";\n\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <a href='#'>Clicky Game</a>\n                <a href='#'>{props.guess}</a>\n                <a href='#'>Score: <span>{props.value}</span> | Top Score: <span>{props.top}</span></a>\n            </nav>\n        </div>\n    )\n}\n\n\n","import React from 'react'\n\nexport default function Card(props) {\n\n    return (\n        \n            \n              <div className=\"col mb-4\">\n              <div className=\"card\">\n                <img src={props.img} onClick={() => props.handleScoring(props.id)} className=\"card-img-top\" alt=\"...\" />\n              </div>\n            </div>\n          \n    \n    )\n}\n","import React from 'react'\n\nexport default function Jumbotron() {\n\n    const divStyle = {\n        backgroundImage: \"url('https://cdn.pixabay.com/photo/2015/12/01/15/43/black-1072366_1280.jpg ')\",\n        color: 'white'\n      };\n\n    return (\n        <div>\n            <div style={divStyle} className=\"jumbotron .jumbotron-fluid .container-fluid \">\n        <h1 className=\"display-4\">Clicky Game!</h1>\n        <p className=\"lead\"><i>Family Guy Edition</i></p>\n        <hr className=\"my-4\"></hr>\n        <p>Click on an image to earn points, but don't click on the same image twice!</p>\n      </div>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport characters from '../characters.json'\nimport Score from './Score'\nimport Card from './Card'\nimport Jumbotron from './Jumbotron'\n\nexport default class Home extends Component {\n\n    state = {\n        characters,\n        score: 0,\n        topScore: 0,\n        guessed: '',\n\n        characterId: []\n    }\n\n    incrementScore = (id) => {\n        var newScore = this.state.score + 1;\n\n        this.setState({\n            score: newScore,\n            guessed: 'You Guessed Correctly!'\n        });\n\n        this.state.characterId.push(id)\n\n        var highScore = this.state.topScore;\n        if (newScore >= highScore) {\n            this.setState({ topScore: newScore })\n        }\n    }\n\n    resetGame = () => {\n        this.setState({ characterId: [] });\n        this.setState({ guessed: 'You Guessed Incorrectly!' });\n        this.setState({ score: 0 });\n\n    }\n\n\n\n\n    handleScoring = id => {\n        var currentIndex = characters.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n\n            // Pick a remaining element...\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And swap it with the current element.\n            temporaryValue = characters[currentIndex];\n            characters[currentIndex] = characters[randomIndex];\n            characters[randomIndex] = temporaryValue;\n        }\n\n        this.setState({ characters });\n        \n        this.state.characterId.includes(id) ? this.resetGame() : this.incrementScore(id);\n    }\n\n    render() {\n        return (\n            <div>\n                <Score value={this.state.score}\n                    top={this.state.topScore}\n                    guess={this.state.guessed} />\n                <Jumbotron />\n\n                <div className=\"row row-cols-1 row-cols-md-3 card-columns\">\n                    {this.state.characters.map(char => {\n                        return <Card\n                            img={char.src}\n                            key={char.id}\n                            id={char.id}\n                            handleScoring={this.handleScoring}\n                        />\n                    })}\n                </div>\n            </div>\n        )\n        \n    }\n\n}","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}